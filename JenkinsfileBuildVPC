pipeline
{
  agent any
  options {
        disableConcurrentBuilds()
  }
  environment {
    amiNameTag = ""
    amiNameTagValue = "";
    thisTestNameVar = "";
    thisTestValue = "exploratory-testing";
    ProjectName = "FirstRun";
    fileProperties = "file.properties"
    old_environment = "";
  }
  stages {
   stage('Get Blue-Green Deployment Repo')
   {
      steps {
        echo "Getting Exploratory Testing Repo"
        git(
        url:'git@github.com:rosserussell/blue_green_deployment-master.git',
        credentialsId: 'blue_green_deployment',
        branch: "master"
        )
     }

   }
   stage('Read Properties File') {
      steps {
        script {
           copyArtifacts(projectName: "${ProjectName}");
           props = readProperties file:"${fileProperties}";
           this_group = props.Group;
           this_version = props.Version;
           this_artifact = props.ArtifactId;
           this_full_build_id = props.FullBuildId;
           this_jenkins_build_id = props.JenkinsBuildId;
        }
        sh "echo Finished setting this_group = $this_group"
        sh "echo Finished setting this_version = $this_version"
        sh "echo Finished setting this_artifact = $this_artifact"
        sh "echo Finished setting this_full_build_id = $this_full_build_id"
        sh "echo Finished setting this_jenkins_build_id = $this_jenkins_build_id"
      }
    }
      stage('Deploying VPC')
      {
        steps
        {
           echo "Starting VPC Deployment --- terraform deploy and start"
           sh 'pwd'
           dir('./production')
           {
              script {
                 sh 'pwd'
                 echo "Checking if terraform s3 boostrap bucket for vpc environment exists"
                 // Check if bucket exists before creating it. This is used by terraform to save the state file
                 aws_list_bucket = "aws s3api list-buckets --query \"Buckets[].Name\" | grep \"my-production\" | awk '{print \$1}'  | awk '{print substr(\$1,2); }' | awk '{print substr(\$1, 1, length(\$1)-1)}'"
                 echo "aws_list_bucket string is: $aws_list_bucket"
                 def bucketResult;
                 bucketResult = sh (returnStdout: true, script: "eval ${aws_list_bucket}");
                 // Remove blank lines from result
                 bucketResult = bucketResult.replaceAll("[\r\n]+","");
                 echo "bucket result is:"
                 echo "'$bucketResult'"
                 echo "done printing"
                 if ("$bucketResult".toString().equals("my-production")) {
                    echo "terraform bucket already exists."
                 } else {
                    sh 'aws s3 mb s3://my-production --region us-west-1'
                    echo "Created terraform bucket."
                 }

                 echo "update terraform variables "
                 amiNameTagValue = "$this_artifact" + "-" + "$this_jenkins_build_id";
                 amiNameTag = "build_id=\"" + "$amiNameTagValue" + "\"";
                 thisTestNameVar = "test-name=\"" + "$thisTestValue" + "\"";
                 def readContent = readFile 'terraform.tfvars'
                 writeFile file: 'terraform.tfvars', text: readContent+"\n$amiNameTag"+"\n$thisTestNameVar"
                 sh 'pwd'
                 sh 'ls -l'
                 sh '/usr/local/bin/terraform init -input=false'
                 sh '/usr/local/bin/terraform plan'
                 sh '/usr/local/bin/terraform apply -auto-approve'
              }
           }
        }
      }
  }
 }
