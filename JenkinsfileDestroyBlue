pipeline
{
  agent any

  options {
        disableConcurrentBuilds()
  }
  environment {
    amiNameTag = ""
    amiNameTagValue = "";
    thisTestNameVar = "";
    thisTestValue = "exploratory-testing";
    ProjectName = "FirstRun";
    fileProperties = "file.properties"
    old_environment = "";
  }
  stages {

   stage('Get Blue-Green Deployment Repo')
   {
      steps {
        echo "Getting Exploratory Testing Repo"
        git(
        url:'git@github.com:rosserussell/blue_green_deployment-master.git',
        credentialsId: 'blue_green_deployment',
        branch: "master"
        )
     }
   }

   stage('Destroy Blue Environment')
   {
     steps
     {
        sh 'pwd'
        script {

          echo "Destroy BLUE"
          dir('BLUE')
          {
            sh 'pwd'
            // Terraform fails if it is unable to retrieve the amiName from the data, even though it does not need it,
            // because this is a destroy call. 
            def readContent = readFile 'terraform.tfvars'
            writeFile file: 'terraform.tfvars', text: readContent+"\n$amiNameTag"+"\n$thisTestNameVar"
            echo "Test completed, destroying environment"
            sh '/usr/local/bin/terraform destroy -auto-approve'            
          }
        }
     }
   }  

  }
}
